{"version":3,"sources":["store/actions.ts","api/api.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["ActionType","BASE_URL","getTodos","a","fetch","response","json","getUser","userId","setUserByIdAction","payload","type","SET_USER","getSelectedUserByIdSelector","state","user","TodoList","dispatch","useDispatch","useState","query","setQuery","visibleTodos","setVisibleTodos","selectedUser","useSelector","requestTodos","todosFromServer","SET_TODOS","console","log","useEffect","handleSelectUser","id","userById","filteredQuery","todos","filter","todo","title","toLocaleLowerCase","includes","getFilteredTodosSelector","resultGoods","allTodos","completed","filteredVisible","className","value","onChange","event","target","map","option","cn","readOnly","onClick","DELETE_USER","CurrentUser","name","email","phone","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdf8b82f.chunk.js","sourcesContent":["export enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n  DELETE_USER = 'DELETE_USER',\n}\n\nexport type Action = SetTodosAction | SetUserByIdAction | DeleteTodoByIdAction;\n\ninterface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\ninterface SetUserByIdAction {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\ninterface DeleteTodoByIdAction {\n  type: ActionType.DELETE_USER,\n  payload: number,\n}\n\nexport const setTodosAction = (payload: Todo[]): SetTodosAction => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUserByIdAction = (payload: User | null): SetUserByIdAction => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const deleteTodoByIdAction\n  = (payload: number): DeleteTodoByIdAction => ({\n    type: ActionType.DELETE_USER,\n    payload,\n  });\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n\n// to delete todos from server instead of redux\n// export const deleteTodoByid = async (todoId: number) => {\n//   await fetch(`${BASE_URL}/todos/${todoId}`, {\n//     method: 'DELETE',\n//   });\n// };\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getSelectedUserByIdSelector = (state: State) => state.user;\nexport const getFilteredTodosSelector = (query: string) => {\n  return (state: State) => (state.todos\n    .filter((todo: Todo) => todo.title.toLocaleLowerCase()\n      .includes(query.toLocaleLowerCase())));\n};\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, getUser } from '../../api/api';\n// eslint-disable-next-line max-len\nimport { deleteTodoByIdAction, setTodosAction, setUserByIdAction } from '../../store/actions';\n// eslint-disable-next-line max-len\nimport { getFilteredTodosSelector, getSelectedUserByIdSelector } from '../../store/selectors';\n\ntype Props = {\n};\n\nexport const TodoList: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n\n  const [query, setQuery] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState('all');\n  const options: OptionArray = ['all', 'active', 'completed'];\n\n  // const todos = useSelector(getTodosSelector);\n  const selectedUser = useSelector(getSelectedUserByIdSelector);\n\n  const requestTodos = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    requestTodos();\n  }, []);\n\n  const handleSelectUser = async (userId: number) => {\n    if (selectedUser?.id !== userId) {\n      try {\n        const userById = await getUser(userId);\n\n        dispatch(setUserByIdAction(userById));\n      } catch {\n        // eslint-disable-next-line no-console\n        console.log('User not found');\n      }\n    }\n  };\n\n  const handleTodo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const filteredQuery = useSelector(getFilteredTodosSelector(query));\n\n  const filteredVisible = (allTodos: Todo[]) => {\n    switch (visibleTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  const resultGoods = filteredVisible(filteredQuery);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handleTodo}\n      />\n      <select onChange={(event) => {\n        setVisibleTodos(event.target.value);\n      }}\n      >\n        {options.map(option => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"TodoList__list-container\">\n\n        <ul className=\"TodoList__list\">\n          {resultGoods.map(todo => (\n            <li\n              className={cn('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className=\"button-delete\"\n                  type=\"button\"\n                  onClick={() => {\n                    // to delete the todo from server\n                    // onClick={async () => {\n                    //   await deleteTodoByid(todo.id);\n                    //   requestTodos();\n\n                    dispatch(deleteTodoByIdAction(todo.id));\n                  }}\n                >\n                  Delete\n                </button>\n                <button\n                  className={cn('TodoList__user-button', 'button', {\n                    // eslint-disable-next-line max-len\n                    'TodoList__user-button--selected': selectedUser?.id === todo.userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    handleSelectUser(todo.userId);\n                  }}\n                >\n                  {`User#${todo.userId}`}\n                </button>\n              </div>\n\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserByIdAction } from '../../store/actions';\nimport { getSelectedUserByIdSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\ntype Props = {\n};\n\nexport const CurrentUser: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n  const selectedUser = useSelector(getSelectedUserByIdSelector);\n\n  const clearUser = () => {\n    dispatch(setUserByIdAction(null));\n  };\n\n  return (\n    <>\n      {selectedUser\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${selectedUser?.id}`}</span>\n            </h2>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={clearUser}\n            >\n              Clear\n            </button>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n          </div>\n        ) : 'No selected user'}\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n\n          <CurrentUser />\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { Action, ActionType } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.DELETE_USER:\n      return {\n        ...state,\n        todos: [...state.todos]\n          .filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}