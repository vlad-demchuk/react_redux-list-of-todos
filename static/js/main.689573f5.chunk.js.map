{"version":3,"sources":["api/api.ts","store/actions.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","getTodos","a","fetch","response","json","getUser","userId","deleteTodoByid","todoId","method","SET_TODOS","SET_USER","setUserByIdAction","payload","type","getTodosSelector","state","todos","getSelectedUserById","user","TodoList","dispatch","useDispatch","useState","query","setQuery","visibleTodos","setVisibleTodos","useSelector","selectedUser","requestTodos","todosFromServer","console","log","useEffect","handleSelectUser","id","userById","resultGoods","allTodos","filter","todo","completed","filteredVisible","title","toLocaleLowerCase","includes","className","value","onChange","event","target","map","option","cn","readOnly","onClick","CurrentUser","name","email","phone","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.689573f5.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteTodoByid = async (todoId: number) => {\n  await fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n  });\n};\n","export const SET_TODOS = 'SET_TODOS';\nexport const SET_USER = 'SET_USER';\n\nexport const setTodosAction = (payload: Todo[]) => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const setUserByIdAction = (payload: User | null) => ({\n  type: SET_USER,\n  payload,\n});\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getSelectedUserById = (state: State) => state.user;\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTodoByid, getTodos, getUser } from '../../api/api';\nimport { setTodosAction, setUserByIdAction } from '../../store/actions';\nimport { getSelectedUserById, getTodosSelector } from '../../store/selectors';\n\ntype Props = {\n};\n\nexport const TodoList: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n\n  const [query, setQuery] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState('all');\n  const options: OptionArray = ['all', 'active', 'completed'];\n\n  const todos = useSelector(getTodosSelector);\n  const selectedUser = useSelector(getSelectedUserById);\n\n  const requestTodos = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    requestTodos();\n  }, []);\n\n  const handleSelectUser = async (userId: number) => {\n    if (selectedUser?.id !== userId) {\n      try {\n        const userById = await getUser(userId);\n\n        dispatch(setUserByIdAction(userById));\n      } catch {\n        // eslint-disable-next-line no-console\n        console.log('User not found');\n      }\n    }\n  };\n\n  const handleTodo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const filteredQuery = todos\n    .filter((todo: Todo) => todo.title.toLocaleLowerCase()\n      .includes(query.toLocaleLowerCase()));\n\n  const filteredVisible = (allTodos: Todo[]) => {\n    switch (visibleTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  const resultGoods = filteredVisible(filteredQuery);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handleTodo}\n      />\n      <select onChange={(event) => {\n        setVisibleTodos(event.target.value);\n      }}\n      >\n        {options.map(option => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"TodoList__list-container\">\n\n        <ul className=\"TodoList__list\">\n          {resultGoods.map(todo => (\n            <li\n              className={cn('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className=\"button-delete\"\n                  type=\"button\"\n                  onClick={async () => {\n                    await deleteTodoByid(todo.id);\n                    requestTodos();\n                  }}\n                >\n                  Delete\n                </button>\n                <button\n                  className={cn('TodoList__user-button', 'button', {\n                    // eslint-disable-next-line max-len\n                    'TodoList__user-button--selected': selectedUser?.id === todo.userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    handleSelectUser(todo.userId);\n                  }}\n                >\n                  {`User#${todo.userId}`}\n                </button>\n              </div>\n\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserByIdAction } from '../../store/actions';\nimport { getSelectedUserById } from '../../store/selectors';\nimport './CurrentUser.scss';\n\ntype Props = {\n};\n\nexport const CurrentUser: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n  const selectedUser = useSelector(getSelectedUserById);\n\n  const clearUser = () => {\n    dispatch(setUserByIdAction(null));\n  };\n\n  return (\n    <>\n      {selectedUser\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${selectedUser?.id}`}</span>\n            </h2>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={clearUser}\n            >\n              Clear\n            </button>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n          </div>\n        ) : 'No selected user'}\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n\n          <CurrentUser />\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { SET_TODOS, SET_USER } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}